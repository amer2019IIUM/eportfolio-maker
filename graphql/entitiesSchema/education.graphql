extend type Mutation {
    createEducation(input: CreateEducationInput! @spread): Education @create

    updateEducation(id: ID!, input: UpdateEducationInput! @spread): Education
        @update

    deleteEducation(id: ID!): Education @delete
}

extend type Query {
    educations(
        orderBy: _ @orderBy(columnsEnum: "EducationColumns")
    ): [Education!]! @paginate(type: PAGINATOR, defaultCount: 10)
    education(id: ID @eq): Education @find
}

type Education {
    id: ID!
    lang: String!
    degree: String!
    from: String!
    to: String
    CGPA: Float!
    headline: String
    school: String
    country: String
    city: String
    desc: String
    hidden_portfolio: Boolean
    hidden_resume: Boolean
    created_at: DateTime
    updated_at: DateTime
    user: User @belongsTo
}

input CreateEducationInput {
    id: ID!
    lang: String!
    degree: String!
    from: String!
    to: String
    CGPA: Float!
    headline: String
    school: String
    country: String
    city: String
    desc: String
    user: CreateUserBelongsTo
}

input UpdateEducationInput {
    lang: String
    degree: String
    from: String
    to: String
    CGPA: Float
    headline: String
    school: String
    country: String
    city: String
    desc: String
}

input CreateUserBelongsTo {
    connect: ID
}
