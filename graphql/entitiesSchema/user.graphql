extend type Mutation {
    createUser(input: CreateUserInput! @spread): User @create

    updateUser(id: ID!, input: UpdateUserInput! @spread): User @update

    deleteUser(id: ID!): User @delete

    ########################
    login(input: LoginUserInput! @spread): AccessToken!
}

extend type Query {
    users(orderBy: _ @orderBy(columnsEnum: "UserColumns")): [User!]!
        @paginate(type: PAGINATOR, defaultCount: 10)

    user(id: ID @eq): User @find

    currentUser: User @auth
}

type User {
    id: ID!
    password: String!
    email: String!
    linkedin: String
    twitter: String
    facebook: String
    github: String!
    phone_no: String
    dribbble: String
    created_at: DateTime
    updated_at: DateTime
    projects: [Project!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    educations: [Education!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    experiences: [Experience!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    interests: [Interest!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    profiles: [Profile!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    skills: [Skill!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    attachments: [Attachment!]! @morphMany(type: PAGINATOR, defaultCount: 10)
}

type AccessToken {
    access_token: String
    token_type: String
}

# USER INPUTS #
input CreateUserInput {
    email: String!
    password: String
    linkedin: String
    twitter: String
    facebook: String
    github: String!
    phone_no: String
    dribbble: String
}

input UpdateUserInput {
    email: String
    password: String
    linkedin: String
    twitter: String
    facebook: String
    github: String
    phone_no: String
    dribbble: String
}

input LoginUserInput {
    email: String
    password: String
}
