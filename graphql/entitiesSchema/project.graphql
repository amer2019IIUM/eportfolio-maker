extend type Mutation {
    createProject(input: CreateProjectInput! @spread): Project @create

    updateProject(id: ID!, input: UpdateProjectInput! @spread): Project @update

    deleteProject(id: ID!): Project @delete
}

extend type Query {
    projects(orderBy: _ @orderBy(columnsEnum: "ProjectColumns")): [Project!]!
        @paginate(type: PAGINATOR, defaultCount: 10)
    project(id: ID @eq): Project @find
}

type Project {
    id: ID!
    lang: String!
    title: String!
    desc: String
    used_technologies: [String]
    progress: Int!
    source_code: String
    icon: String
    last_update: DateTime
    hidden_portfolio: Boolean
    hidden_resume: Boolean
    sort: Int
    created_at: DateTime
    updated_at: DateTime
    user: User @belongsTo
    technologies: [Technology!]! @belongsToMany
    attachments: [Attachment!]! @morphMany
}

input CreateProjectInput {
    title: String!
    lang: String
    desc: String
    used_technologies: [String]
    progress: Int!
    source_code: String
    icon: String
    attachments: CreateAttachmentBelongsToMany
    user: CreateUserBelongsTo
}

input CreateAttachmentBelongsToMany {
    connect: [ID!]
    create: [CreateAttachmentHasManyInputs]
    delete: [ID!]
    connect: [ID!]
    disconnect: [ID!]
}

input UpdateProjectInput {
    title: String!
    lang: String
    desc: String
    used_technologies: [String]
    progress: Int!
    source_code: String
    icon: String
    attachments: CreateAttachmentBelongsToMany
}
