extend type Mutation {
    createExperience(input: CreateExperienceInput! @spread): Experience @create

    updateExperience(
        id: ID!
        input: UpdateExperienceInput! @spread
    ): Experience @update

    deleteExperience(id: ID!): Experience @delete
}

extend type Query {
    experiences(
        orderBy: _ @orderBy(columnsEnum: "ExperienceColumns")
    ): [Experience!]! @paginate(type: PAGINATOR, defaultCount: 10)
    experience(id: ID @eq): Experience @find
}

type Experience {
    id: ID!
    lang: String!
    company: String
    from: Date
    to: Date
    job_title: String
    core_duties: [String]
    location: String
    further_details: String
    hidden_portfolio: Boolean
    hidden_resume: Boolean
    created_at: DateTime
    updated_at: DateTime
    user: User @belongsTo
}

input CreateExperienceInput {
    company: String!
    lang: String
    from: Date
    to: Date
    job_title: String!
    core_duties: [String]
    location: String
    further_details: String
    hidden_portfolio: Boolean
    hidden_resume: Boolean
    user: CreateUserBelongsTo
}

input UpdateExperienceInput {
    company: String
    lang: String
    from: Date
    to: Date
    job_title: String
    core_duties: [String]
    location: String
    further_details: String
    hidden_portfolio: Boolean
    hidden_resume: Boolean
}

input CreateUserBelongsTo {
    connect: ID!
}
